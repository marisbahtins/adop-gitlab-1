#!/bin/bash
set -e

echo "Loading ${GITLAB_RUNTIME_DIR}/env-defaults"
source ${GITLAB_RUNTIME_DIR}/env-defaults

LOCAL_GITLAB_HOST="http://127.0.0.1:80${GITLAB_RELATIVE_URL_ROOT}"


echo "--------------------------------------------------------------------------------------"
echo "============================ CHECKING GITLAB IS AVAILABLE ============================"
echo "--------------------------------------------------------------------------------------"

pretty_sleep() {
  secs=${1:-60}
  tool=${2:-service}
  while [ $secs -gt 0 ]; do
    echo -ne "$tool unavailable, sleeping for: $secs\033[0Ks\r"
    sleep 1
    : $((secs--))
  done
  echo "$tool was unavailable, so slept for: ${1:-60} secs"
}

# Check that Gitlab service has started up and is running healthily
echo "* Waiting for GitLab to become available - this can take a few minutes"
TOOL_SLEEP_TIME=10
until [[ $(curl -s ${LOCAL_GITLAB_HOST}/-/health) == 'GitLab OK' ]]; do pretty_sleep ${TOOL_SLEEP_TIME} GitLab; done

echo "----------------------------------------------------------------------------"
echo "============================ CONFIGURING GITLAB ============================"
echo "----------------------------------------------------------------------------"


# Log-in as the LDAP users so they are visible to the root account
echo "1/4 Validating users.."
validate_as_ldap_user ${LOCAL_GITLAB_HOST} ${INITIAL_ADMIN_USER} ${INITIAL_ADMIN_PASSWORD}
validate_as_ldap_user ${LOCAL_GITLAB_HOST} ${JENKINS_USER} ${JENKINS_PASSWORD}

# Generate an API token for the root user to make API calls
echo "2/4 Generating root admin access token."
generate_root_access_token ${LOCAL_GITLAB_HOST} ${GITLAB_ROOT_EMAIL} ${GITLAB_ROOT_PASSWORD}

# Make the LDAP users admins in GitLab
echo "3/4 Granting users admin permission."
source ${GITLAB_INSTALL_DIR}/secret
make_ldap_user_as_admins ${LOCAL_GITLAB_HOST} ${personal_access_token} ${INITIAL_ADMIN_USER}
make_ldap_user_as_admins ${LOCAL_GITLAB_HOST} ${personal_access_token} ${JENKINS_USER}
rm -f ${GITLAB_INSTALL_DIR}/secret

echo "----------------------------------------------------------------------------"
echo "===================== GITLAB CONFIGURATION IS COMPLETE ======================"
echo "----------------------------------------------------------------------------"


# Script from https://gist.github.com/michaellihs/5ef5e8dbf48e63e2172a573f7b32c638
# Generates a personal access token for the API as the root user
generate_root_access_token() {
    local GITLAB_HOST=${1}
    local GITLAB_USER=${2}
    local GITLAB_PASSWORD=${3}

    # 1. curl the login page to get a session cookie and the sources with the auth token
    body_header=$(curl -c cookies.txt -i "${GITLAB_HOST}/users/sign_in" -s)

    # grep the auth token for the user login for
    csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)

    # 2. send login credentials with curl, using cookies and token from previous request
    curl -b cookies.txt -c cookies.txt -i "${GITLAB_HOST}/users/sign_in" \
        --data "user[login]=${GITLAB_USER}&user[password]=${GITLAB_PASSWORD}" \
        --data-urlencode "authenticity_token=${csrf_token}"

    # 3. send curl GET request to personal access token page to get auth token
    body_header=$(curl -H 'user-agent: curl' \
        -b cookies.txt \
        -i "${GITLAB_HOST}/profile/personal_access_tokens" -s)
    csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)

    # 4. curl POST request to send the "generate personal access token form"
    # the response will be a redirect, so we have to follow using `-L`
    body_header=$(curl -L -b cookies.txt "${GITLAB_HOST}/profile/personal_access_tokens" \
        --data-urlencode "authenticity_token=${csrf_token}" \
        --data 'personal_access_token[name]=gitlab_root_token&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')

    # 5. Scrape the personal access token from the response HTML
    personal_access_token=$(echo $body_header | perl -ne 'print "$1\n" if /created-personal-access-token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
    # Return token
    echo "export root_api_token=${personal_access_token}" > ${GITLAB_INSTALL_DIR}/secret
}

# Create personal access token from previous script to generate root api token
make_ldap_user_as_admins() {
    local GITLAB_HOST=${1}
    local ROOT_API_TOKEN=${2}
    local USER=${3}

    # api call to get user details
    requestbody=$(curl -X GET -H "Private-Token: ${ROOT_API_TOKEN}" \
        ${GITLAB_HOST}/api/v4/users?username=${USER})
    echo "Received user details, extracting user ID"

    # regex the user ID
    id=$(echo $requestbody | perl -ne 'print "$1\n" if /"id":(\d)/' | sed -n 1p)
    echo "The jenkins user ID is: ${id}" 

    # Change the user ID to admin
    curl -X PUT -H "Private-Token: ${ROOT_API_TOKEN}" \
        "${GITLAB_HOST}/api/v4/users/${id}?admin=true"

    echo "${USER} user is now an admin in Gitlab"
}

# Script heavily based on https://gist.github.com/michaellihs/5ef5e8dbf48e63e2172a573f7b32c638
# This script logs in gitlab so they become visible to the root user.
validate_as_ldap_user() {
    local GITLAB_HOST=${1}
    local USER=${2}
    local PASS=${3} 

    # 1. curl for the login page to get a session cookie and the sources with the auth tokens
    echo "[Token generation script]: Curling login page......."
    body_header=$(curl -c cookies.txt -i "${GITLAB_HOST}/users/sign_in" -s)

    # grep the auth token for the user login for
    echo "[Token generation script]: Extracting the CSRF token from the login page......."
    csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
    echo "[Token generation script]: Extracted the CSRF token for the login page: $csrf_token"

    # 2. send login credentials with curl, using cookies and token from previous request
    echo "[Token generation script]: Logging in to Gitlab......."
    curl -b cookies.txt -c cookies.txt -i "${GITLAB_HOST}/users/auth/ldapmain/callback" \
                            --data "username=${USER}&password=${PASS}" \
                            --data-urlencode "authenticity_token=${csrf_token}"

    echo "${USER} user logged in"
}

echo "DONE======="